version: '3.4'
networks:
  microservice:
   driver: bridge

  
services:
  web-apigateway:
    container_name: web.apigateway
    image: ${DOCKER_REGISTRY-}webapigateway
    build:
      context: .
      dockerfile: src/ApiGateways/Web.ApiGateway/Dockerfile
    ports:
     - "8010:443"
    networks:
     - microservice

  editionappDb:
    container_name: editionappDb
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
     - ACCEPT_EULA=Y
     - MSSQL_SA_PASSWORD=boracetin123!     
    ports:
     - 1433:1433
    networks:
     - microservice


  editionservice-api:
    container_name: editionservice.api
    image: ${DOCKER_REGISTRY-}editionserviceapi
    build:
      context: .
      dockerfile: src/Services/EditionService/EditionService.API/Dockerfile
    depends_on:
     - editionappDb
    networks:
     - microservice

  localizationservice-api:
    container_name: localizationservice.api
    image: ${DOCKER_REGISTRY-}localizationserviceapi
    build:
      context: .
      dockerfile: src/Services/LocalizationService/LocalizationService.API/Dockerfile
    depends_on:
     - editionappDb
    networks:
     - microservice
 
  sessionservice-api:
    container_name: sessionservice.api
    image: ${DOCKER_REGISTRY-}sessionserviceapi
    build:
      context: .
      dockerfile: src/Services/SessionService/SessionService.API/Dockerfile
    networks:
     - microservice
    depends_on:
     - editionappDb

  
  tenantservice-api:
    container_name: tenantservice.api
    image: ${DOCKER_REGISTRY-}tenantserviceapi
    build:
      context: .
      dockerfile: src/Services/TenantService/TenantService.API/Dockerfile
    depends_on:
     - editionappDb
    networks:
     - microservice

  userservice-api:
    container_name: userservice.api
    image: ${DOCKER_REGISTRY-}userserviceapi
    build:
      context: .
      dockerfile: src/Services/UserService/UserService.API/Dockerfile
    depends_on:
     - editionappDb
    networks:
     - microservice
  paymentservice-api:
    container_name: paymentservice.api
    image: ${DOCKER_REGISTRY-}paymentserviceapi
    build:
      context: .
      dockerfile: src/Services/PaymentService/PaymentService.API/Dockerfile
    depends_on:
     - editionappDb
    networks:
     - microservice
  identityservice-api:
    container_name: identityservice.api
    image: ${DOCKER_REGISTRY-}identityserviceapi
    build:
      context: .
      dockerfile: src/Services/IdentityService/IdentityService.API/Dockerfile
    depends_on:
     - editionappDb
    networks:
     - microservice

  stripeservice-api:
    container_name: stripeservice.api
    image: ${DOCKER_REGISTRY-}stripeserviceapi
    build:
      context: .
      dockerfile: src/Services/StripeService/StripeService.API/Dockerfile
    depends_on:
     - editionappDb
    networks:
     - microservice

  smtpmailservice-api:
    container_name: smtpmailservice.api
    image: ${DOCKER_REGISTRY-}smtpmailservice
    build:
      context: .
      dockerfile: src/Services/SmtpMailService/SmtpMailService.API/Dockerfile
    depends_on:
     - smtp_relay
    networks:
     - microservice

  smtp_relay:
    image: namshi/smtp
    container_name: smtp_relay
    restart: always
    ports:
     - "25:25"
    environment:
      RELAY_HOST: smtp.example.com
      RELAY_PORT: 587
      RELAY_USERNAME: alice@example.com
      RELAY_PASSWORD: secretpassword

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
     - microservice

  elasticservice-api:
    container_name: elasticservice.api
    image: ${DOCKER_REGISTRY-}elasticserviceapi
    build:
      context: .
      dockerfile: src/Services/ElasticService/ElasticSearch/ElasticSearch.API/Dockerfile
    depends_on:
     - elasticsearch
    networks:
     - microservice

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:6.0.1
    volumes:
      - ./src/Services/ElasticService/ElasticSearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"

  logstash:
    image: docker.elastic.co/logstash/logstash:6.0.1
    command: -f /etc/logstash/conf.d/
    volumes:
      - ./src/Services/ElasticService/Logstash:/etc/logstash/conf.d/
    ports:
      - "5000:5000"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
  kibana:
    image: docker.elastic.co/kibana/kibana:6.0.1
    volumes:
      - ./src/Services/ElasticService/Kibana/:/usr/share/kibana/config/
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch